import React, { useState, useEffect, useRef } from 'react';
import {
    runVideoAgentTurn,
    generatePodcastScript,
    generateImages as generateImagesService,
    generateSpeech,
    searchWithGemini,
} from '../services/geminiService';
import { assembleVideo } from '../services/videoService';
import type { ChatMessage, GeneratedImage, PodcastScriptLine } from '../types';
import { GenerateContentResponse } from '@google/genai';
import { PaperAirplaneIcon, DownloadIcon } from './icons';

export const VideoCreatorAgent: React.FC = () => {
    // --- State Management ---
    const [history, setHistory] = useState<ChatMessage[]>([]);
    const [currentMessage, setCurrentMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isToolExecuting, setIsToolExecuting] = useState(false);

    // Assets generated by the agent
    const [script, setScript] = useState<PodcastScriptLine[] | null>(null);
    const [images, setImages] = useState<GeneratedImage[]>([]);
    const [voiceover, setVoiceover] = useState<string | null>(null); // base64 audio
    const [finalVideoUrl, setFinalVideoUrl] = useState<string | null>(null);

    const chatEndRef = useRef<HTMLDivElement>(null);

    // --- Effects ---
    useEffect(() => {
        // Start the conversation with a welcome message from the agent
        setIsLoading(true);
        const initialMessage: ChatMessage = { role: 'model', content: "أهلاً بك! أنا وكيل صناعة الفيديو. ما هو الموضوع الذي تود إنشاء فيديو عنه اليوم؟" };
        setTimeout(() => {
            setHistory([initialMessage]);
            setIsLoading(false);
        }, 1000);
    }, []);

    useEffect(() => {
        // Auto-scroll to the latest message
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [history, isLoading, isToolExecuting]);

    // --- Core Logic ---
    const handleSendMessage = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!currentMessage.trim() || isLoading) return;

        const userMessage: ChatMessage = { role: 'user', content: currentMessage.trim() };
        const newHistory = [...history, userMessage];

        setHistory(newHistory);
        setCurrentMessage('');
        setIsLoading(true);

        try {
            const response = await runVideoAgentTurn(newHistory);
            await handleAgentResponse(response, newHistory);
        } catch (error) {
            console.error("Error during handleSendMessage:", error);
            const errorMessage: ChatMessage = { role: 'model', content: "عذراً، حدث خطأ ما. يرجى المحاولة مرة أخرى." };
            setHistory(prev => [...prev, errorMessage]);
        } finally {
            setIsLoading(false);
        }
    };

    const handleAgentResponse = async (response: GenerateContentResponse, currentHistory: ChatMessage[]) => {
        const functionCalls = response.functionCalls;
        const text = response.text;

        if (text) {
            const agentMessage: ChatMessage = { role: 'model', content: text };
            setHistory(prev => [...prev, agentMessage]);
        }

        if (functionCalls && functionCalls.length > 0) {
            const toolCall = functionCalls[0];
            const toolName = toolCall.name;
            const toolArgs = toolCall.args;

            setIsToolExecuting(true);

            // This is where we execute the tools
            let toolResult: any;
            try {
                switch (toolName) {
                    case 'googleSearch':
                        const query = toolArgs.query as string;
                        const searchStream = await searchWithGemini(query, {
                            summaryLength: 'normal',
                            minSources: 3,
                            // Add other filters as needed or expose them to the agent
                        } as any);

                        let searchResultText = '';
                        for await (const chunk of searchStream) {
                            searchResultText += chunk.text;
                        }

                        toolResult = { result: searchResultText };
                        break;

                    case 'generate_script':
                        const generatedScript = await generatePodcastScript(toolArgs.topic as string, 'short', 'casual', 'Egyptian');
                        setScript(generatedScript);
                        toolResult = { script: generatedScript.map(s => `${s.speaker}: ${s.line}`).join('\n') };
                        break;

                    case 'generate_images':
                        const generatedImages = await generateImagesService(toolArgs.prompts.join('; '));
                        setImages(generatedImages);
                        toolResult = { status: `${generatedImages.length} images generated successfully.` };
                        break;

                    case 'generate_voiceover':
                        if (!script) throw new Error("Script not available to generate voiceover.");
                        const scriptText = script.map(s => s.line).join(' ');
                        const audioB64 = await generateSpeech(scriptText, 'Zephyr'); // Using a default voice for simplicity
                        setVoiceover(audioB64);
                        toolResult = { status: "Voiceover generated successfully." };
                        break;

                    case 'assemble_video':
                        if (images.length === 0 || !voiceover) throw new Error("Assets not ready for video assembly.");
                        const imageB64s = images.map(img => img.imageBytes);
                        const videoUrl = await assembleVideo(imageB64s, voiceover);
                        setFinalVideoUrl(videoUrl);
                        toolResult = { status: "Video assembled successfully." };
                        break;

                    default:
                        throw new Error(`Unknown tool: ${toolName}`);
                }

                // Send the tool result back to the agent
                const toolResponseMessage: ChatMessage = {
                    role: 'user', // It's a 'user' role for function/tool responses
                    content: {
                        name: toolName,
                        content: toolResult,
                    }
                };

                const newHistoryWithToolResponse = [...currentHistory, toolResponseMessage];
                setHistory(newHistoryWithToolResponse);
                const nextAgentResponse = await runVideoAgentTurn(newHistoryWithToolResponse);
                await handleAgentResponse(nextAgentResponse, newHistoryWithToolResponse);

            } catch (error) {
                 console.error(`Error executing tool ${toolName}:`, error);
                 const errorMessage: ChatMessage = { role: 'model', content: `عذراً، فشلت في تنفيذ أداة ${toolName}.` };
                 setHistory(prev => [...prev, errorMessage]);
            } finally {
                setIsToolExecuting(false);
            }
        }
    };

    // --- UI Rendering ---
    return (
        <div className="w-full h-[calc(100vh-200px)] flex flex-col bg-slate-800/50 border border-slate-700 rounded-xl shadow-lg p-4">
            <h2 className="text-2xl font-bold text-slate-100 mb-4 text-center">وكيل صانع الفيديو</h2>

            <div className="flex-grow overflow-y-auto mb-4 p-2 space-y-4 bg-slate-900/50 rounded-lg">
                {history.map((msg, index) => {
                    if (typeof msg.content !== 'string') return null; // Don't render tool responses

                    return (
                        <div key={index} className={`flex items-end gap-2 ${msg.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                            <div className={`max-w-[80%] p-3 rounded-xl ${msg.role === 'user' ? 'bg-cyan-600 text-white rounded-br-none' : 'bg-slate-700 text-slate-200 rounded-bl-none'}`}>
                                <p className="whitespace-pre-wrap">{msg.content}</p>
                            </div>
                        </div>
                    );
                })}
                {isLoading && !isToolExecuting && (
                     <div className="flex items-end gap-2 flex-row">
                        <div className="p-3 rounded-xl bg-slate-700 text-slate-200 rounded-bl-none">
                            <div className="flex items-center gap-2">
                                <span className="text-sm">يفكر...</span>
                                <div className="w-2 h-2 bg-slate-400 rounded-full animate-pulse"></div>
                            </div>
                        </div>
                    </div>
                )}
                {isToolExecuting && (
                     <div className="flex items-end gap-2 flex-row">
                        <div className="p-3 rounded-xl bg-slate-700 text-slate-200 rounded-bl-none">
                            <div className="flex items-center gap-2">
                                <span className="text-sm">يعمل على طلبك...</span>
                                <div className="w-2 h-2 bg-cyan-400 rounded-full animate-ping"></div>
                            </div>
                        </div>
                    </div>
                )}
                 <div ref={chatEndRef} />
            </div>

            {/* Display Generated Assets */}
            {images.length > 0 && (
                <div className="mb-4">
                    <h3 className="text-lg font-semibold text-slate-300 mb-2">الصور المولدة:</h3>
                    <div className="flex gap-2 overflow-x-auto p-2 bg-slate-900/50 rounded-lg">
                        {images.map((img, idx) => (
                            <img key={idx} src={`data:image/jpeg;base64,${img.imageBytes}`} alt={img.altText} className="h-24 w-auto rounded-md object-cover" />
                        ))}
                    </div>
                </div>
            )}
            {voiceover && (
                 <div className="mb-4">
                    <h3 className="text-lg font-semibold text-slate-300 mb-2">التعليق الصوتي:</h3>
                    <audio controls src={`data:audio/mp3;base64,${voiceover}`} className="w-full"></audio>
                </div>
            )}
             {finalVideoUrl && (
                 <div className="mb-4 p-4 text-center bg-green-900/50 border border-green-700 rounded-lg">
                    <h3 className="text-xl font-bold text-green-300 mb-2">الفيديو جاهز!</h3>
                    <a
                        href={finalVideoUrl}
                        download="puls-video.mp4"
                        className="inline-flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors"
                    >
                        <DownloadIcon className="h-5 w-5"/>
                        تحميل الفيديو
                    </a>
                </div>
            )}

            <form onSubmit={handleSendMessage} className="flex items-center gap-2">
                <input
                    type="text"
                    value={currentMessage}
                    onChange={(e) => setCurrentMessage(e.target.value)}
                    placeholder="اكتب رسالتك هنا..."
                    className="flex-grow px-4 py-2 bg-slate-900 border border-slate-600 rounded-full focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    disabled={isLoading || isToolExecuting}
                />
                <button
                    type="submit"
                    className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold p-3 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isLoading || isToolExecuting || !currentMessage.trim()}
                    aria-label="إرسال"
                >
                    <PaperAirplaneIcon className="h-5 w-5" />
                </button>
            </form>
        </div>
    );
};
